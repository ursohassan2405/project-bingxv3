#!/usr/bin/env python3
"""
Script de teste para o scanner inicial
Testa a funcionalidade b√°sica do scanner sem depend√™ncias externas
"""

import asyncio
import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

async def test_scanner_import():
    """Teste se o scanner pode ser importado corretamente"""
    try:
        from scanner.initial_scanner import InitialScanner, get_initial_scanner, perform_initial_scan
        print("‚úÖ Scanner importado com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao importar scanner: {e}")
        return False

async def test_scanner_instantiation():
    """Teste se o scanner pode ser instanciado"""
    try:
        from scanner.initial_scanner import InitialScanner
        scanner = InitialScanner()
        print("‚úÖ Scanner instanciado com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao instanciar scanner: {e}")
        return False

async def test_api_integration():
    """Teste se o endpoint da API pode ser chamado"""
    try:
        import requests
        import json
        
        # Tentar chamar o endpoint (mesmo que falhe, verifica se est√° dispon√≠vel)
        url = "http://localhost:8000/api/scanner/initial-scan"
        headers = {"Content-Type": "application/json"}
        
        # Fazer uma requisi√ß√£o POST (vai falhar se o servidor n√£o estiver rodando)
        response = requests.post(url, headers=headers, timeout=5)
        print(f"‚úÖ Endpoint API responde (status: {response.status_code})")
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è  Servidor n√£o est√° rodando (esperado para teste)")
        return True  # Isso √© esperado em teste
    except Exception as e:
        print(f"‚ùå Erro no teste da API: {e}")
        return False

async def test_config_files():
    """Teste se os arquivos de configura√ß√£o existem"""
    try:
        config_files = [
            "config/trading_config.py",
            "database/connection.py",
            "api/web_api.py",
            "frontend/index.html"
        ]
        
        for config_file in config_files:
            if not Path(config_file).exists():
                print(f"‚ùå Arquivo n√£o encontrado: {config_file}")
                return False
        
        print("‚úÖ Todos os arquivos de configura√ß√£o encontrados")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar arquivos: {e}")
        return False

async def run_tests():
    """Executa todos os testes"""
    print("üß™ Iniciando testes do Scanner Inicial BingX...\n")
    
    tests = [
        ("Importa√ß√£o do Scanner", test_scanner_import),
        ("Instancia√ß√£o do Scanner", test_scanner_instantiation), 
        ("Integra√ß√£o com API", test_api_integration),
        ("Arquivos de Configura√ß√£o", test_config_files)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"üîç Executando: {test_name}")
        try:
            result = await test_func()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Falha no teste '{test_name}': {e}")
            results.append(False)
        print()
    
    # Resumo dos resultados
    passed = sum(results)
    total = len(results)
    
    print("=" * 50)
    print(f"üìä RESULTADOS DOS TESTES:")
    print(f"   ‚úÖ Passou: {passed}/{total}")
    print(f"   ‚ùå Falhou: {total - passed}/{total}")
    print(f"   üìà Taxa de Sucesso: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ Todos os testes passaram! Scanner pronto para uso.")
        return True
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique as configura√ß√µes.")
        return False

if __name__ == "__main__":
    print("ü§ñ BingX Trading Bot - Teste do Scanner Inicial")
    print("=" * 50)
    
    try:
        success = asyncio.run(run_tests())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico no teste: {e}")
        sys.exit(1)